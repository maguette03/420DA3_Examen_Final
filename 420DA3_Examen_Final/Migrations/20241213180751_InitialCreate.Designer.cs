// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using _420DA3_Examen_Final.DataAccess;

#nullable disable

namespace _420DA3_Examen_Final.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241213180751_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuteursLivres", b =>
                {
                    b.Property<int>("AuteurId")
                        .HasColumnType("int");

                    b.Property<int>("LivreId")
                        .HasColumnType("int");

                    b.HasKey("AuteurId", "LivreId");

                    b.HasIndex("LivreId");

                    b.ToTable("AuteursLivres", (string)null);

                    b.HasData(
                        new
                        {
                            AuteurId = 1,
                            LivreId = 1
                        },
                        new
                        {
                            AuteurId = 2,
                            LivreId = 2
                        });
                });

            modelBuilder.Entity("_420DA3_Examen_Final.Business.Domain.Auteur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("FirstName")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("LastName")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.ToTable("Auteurs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Isaac",
                            LastName = "Asimov"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Alastair",
                            LastName = "Reynolds"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Peter F",
                            LastName = "Hamilton"
                        });
                });

            modelBuilder.Entity("_420DA3_Examen_Final.Business.Domain.Livre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("Isbn")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("RowVersion")
                        .HasColumnOrder(3);

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("Titre")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("livres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isbn = "978-0-553-29335-7",
                            Titre = "Foundation"
                        },
                        new
                        {
                            Id = 2,
                            Isbn = "978-0-575-06875-9",
                            Titre = "Revelation Space "
                        });
                });

            modelBuilder.Entity("AuteursLivres", b =>
                {
                    b.HasOne("_420DA3_Examen_Final.Business.Domain.Auteur", null)
                        .WithMany()
                        .HasForeignKey("AuteurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_420DA3_Examen_Final.Business.Domain.Livre", null)
                        .WithMany()
                        .HasForeignKey("LivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
